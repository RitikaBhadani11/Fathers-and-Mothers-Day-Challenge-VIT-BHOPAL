// Right view of Binary Tree 
class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> ans = new ArrayList<>();
        if (root == null) return ans;

        Queue<TreeNode> q = new LinkedList<>();
        q.add(root);

        while (!q.isEmpty()) {
            int level = q.size();
            List<Integer> temp = new ArrayList<>();

            for (int i = 0; i < level; i++) {
                TreeNode current = q.poll();
                temp.add(current.val);

                if (current.left != null) q.offer(current.left);
                if (current.right != null) q.offer(current.right);
            }

            // Add the last element (rightmost) of this level to the answer
            ans.add(temp.get(temp.size() - 1));
        }

        return ans;
    }
}
//Lexicographically Smallest Palindrome
class Solution {
    public String makeSmallestPalindrome(String s) {
        int n=s.length();
        char[] arr=new char[n];
        int r=n-1;
        int l=0;
       
        while(l<=r){
            char ch1=s.charAt(l);
            char ch2=s.charAt(r);
            if(ch1==ch2){
                arr[l]=ch1;
                arr[r]=ch2;
            }
            else{
                arr[l]=(char) (Math.min(ch1 - 'a', ch2 - 'a') + 'a');
                arr[r]=(char) (Math.min(ch1 - 'a', ch2 - 'a') + 'a');
            }
            l++;
            r--;
        }
        return new String(arr);
        
    }
}
