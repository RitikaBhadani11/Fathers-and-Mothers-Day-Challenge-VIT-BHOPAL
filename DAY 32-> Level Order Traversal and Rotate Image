//Level Order Traversal
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> ans=new ArrayList<>();
        Queue<TreeNode> q=new LinkedList<>();
        if(root==null){
            return ans;
        }
        q.offer(root);
        while(!q.isEmpty()){
            int level=q.size();
            List<Integer> temp=new ArrayList<>();
            for(int i=0;i<level;i++){
                TreeNode current=q.poll();
                temp.add(current.val);
                if(current.left!=null){
                    q.offer(current.left);
                }
                if(current.right!=null){
                    q.offer(current.right);
                }

            }
            ans.add(temp);
        }
        return ans;
        
    }
}
//Rotate Image
class Solution {
    public void reverse(int[] arr,int n1,int n2){
        while(n1<n2){
            int temp=arr[n1];
            arr[n1]=arr[n2];
            arr[n2]=temp;
            n1++;
            n2--;
        }
    }
    public void rotate(int[][] matrix) {
        int n=matrix.length;
        int m=matrix[0].length;
        for(int i=0;i<n;i++){
            for(int j=i+1;j<n;j++){
                int temp=matrix[i][j];
                matrix[i][j]=matrix[j][i];
                matrix[j][i]=temp;
            }
        }
        for(int i=0;i<n;i++){
            reverse(matrix[i],0,n-1);
        }
        
    }
}
