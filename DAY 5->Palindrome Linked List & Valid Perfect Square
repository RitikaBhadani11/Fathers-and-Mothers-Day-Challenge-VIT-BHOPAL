class Solution {
    public ListNode reverse(ListNode head){
        ListNode prev=null;
        ListNode curr=head;
        while(curr!=null){
            ListNode front=curr.next;
            curr.next=prev;
            prev=curr;
            curr=front;
        }
        return prev;
    }
   

    public boolean isPalindrome(ListNode head) {
       ListNode slow=head;
       ListNode fast=head;
       if(head==null || head.next==null){
        return true;

       }
       while(fast!=null && fast.next!=null){
        slow=slow.next;
        fast=fast.next.next;
       }
      
       ListNode temp2= reverse(slow);
       ListNode temp1=head;
       while(temp2!=null){
        if(temp1.val!=temp2.val){
            return false;
        }
        temp1=temp1.next;
        temp2=temp2.next;
        

       }
       return true;

        
    }
}
//Valid Perfect Square
class Solution {
    public boolean isPerfectSquare(int num) {
        if (num < 2) return true;  
        long left = 0, right = num;
        
        while (left <= right) {
            long mid = left + (right - left) / 2;
            long square = mid * mid;

            if (square == num) {
                return true;  
            } else if (square < num) {
                left = mid + 1;  
            } else {
                right = mid - 1;  
            }
        }
        
        return false;  
    }
}

