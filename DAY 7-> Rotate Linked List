class Solution {
    public void reverse(int[] arr, int n1, int n2) {
        while (n1 < n2) {
            int temp = arr[n1];
            arr[n1] = arr[n2];
            arr[n2] = temp;
            n1++;
            n2--;
        }
    }

    public ListNode rotateRight(ListNode head, int k) {
        if (head == null || head.next == null || k == 0) {
            return head;
        }

        // Step 1: Find the length of the linked list
        ListNode temp = head;
        int cnt = 0;
        while (temp != null) {
            cnt++;
            temp = temp.next;
        }

        // Step 2: Convert the linked list into an array
        int[] arr = new int[cnt];
        temp = head;
        for (int i = 0; i < cnt; i++) {
            arr[i] = temp.val;
            temp = temp.next;
        }

        // Step 3: Apply the rotation logic using array reversal
        k = k % cnt;  // In case k is larger than the length
        // No need to rotate if k is 0

        // Reverse the entire array
        reverse(arr, 0, cnt - 1);
        // Reverse the first k elements
        reverse(arr, 0, k - 1);
        // Reverse the remaining elements
        reverse(arr, k, cnt - 1);

        // Step 4: Convert the array back to a linked list
        temp = head;
        for (int i = 0; i < cnt; i++) {
            temp.val = arr[i];
            temp = temp.next;
        }

        return head;
    }
}
