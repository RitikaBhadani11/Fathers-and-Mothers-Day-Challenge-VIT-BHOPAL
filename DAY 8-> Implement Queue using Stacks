import java.util.Stack;

class MyQueue {

    private Stack<Integer> s1;
    private Stack<Integer> s2;

    public MyQueue() {
        s1 = new Stack<>();
        s2 = new Stack<>();
    }
    
    // Function to push an element into the queue.
    public void push(int x) {
        s1.push(x);  // Push the element into s1.
    }
    
    // Function to remove and return the front element from the queue.
    public int pop() {
        if (s2.isEmpty()) {  // If s2 is empty, transfer elements from s1 to s2.
            while (!s1.isEmpty()) {
                s2.push(s1.pop());
            }
        }
        if(s2.isEmpty()){
            return -1;
        }
        else{
            return  s2.pop();  // Return top of s2 or -1 if queue is empty.

        }
    }
    
    // Function to return the front element without removing it.
    public int peek() {
        if (s2.isEmpty()) {  // If s2 is empty, transfer elements from s1 to s2.
            while (!s1.isEmpty()) {
                s2.push(s1.pop());
            }
        }
        if(s2.isEmpty()){
            return -1;
        }
        else {
            return  s2.peek();  // Return top of s2 or -1 if queue is empty.
        }    
    }
    
    // Function to check if the queue is empty.
    public boolean empty() {
        return s1.isEmpty() && s2.isEmpty();  // Queue is empty if both stacks are empty.
    }
}
